name: 'Generate code coverage'

inputs:
  docker-img-name: 
    description: 'Name of the codecov image'
    required: true

env:
  DOCKER_BUILDKIT: 1

runs:
  using: 'composite'
  steps:
    - name: Run quick unit tests and generate coverage
      run: |
        set -x
        docker run --name libvcx-codecov-unit --network host \
          -e RUST_TEST_THREADS=1 \
          -e TEST_POOL_IP=127.0.0.1 \
          -e CARGO_INCREMENTAL=0 \
          -e RUSTFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          -e RUSTDOCFLAGS='-Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Cpanic=abort -Zpanic_abort_tests' \
          ${{ inputs.docker-img-name }} \
          bash -c '(cd $HOME/libvcx && \
              cargo test --features "general_test aries" && \
              grcov ./target/debug/ -s . -t lcov --llvm --branch --ignore-not-existing -o ./target/debug/coverage.lcov)'
        docker_id=$(docker ps -a | grep libvcx-codecov-unit | grep Exited | tail -n 1 | cut -d ' ' -f 1)
        docker_image_id=$(docker images | grep codecov | perl -pe 's/\s+/ /g' | cut -d ' ' -f 3)
        docker cp ${docker_id}:/home/indy/libvcx/target/debug/coverage.lcov libvcx/coverage.lcov
        docker rm ${docker_id} > /dev/null
        docker rmi ${docker_image_id} > /dev/null
        mkdir -p /tmp/artifacts/coverage
      shell: bash
